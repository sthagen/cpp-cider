cmake_minimum_required(VERSION 3.16)
project(CIDER VERSION 2020.12)

option(CIDER_BUILD_EXAMPLES "whether or not to build the examples" ON)
option(CIDER_BUILD_TESTS "whether or not to build the tests" ON)
cmake_host_system_information(RESULT INFO_HOSTNAME QUERY HOSTNAME)
message(STATUS "Hostname: ${INFO_HOSTNAME}")
cmake_host_system_information(RESULT INFO_FQDN QUERY FQDN)
message(STATUS "Fully Qualified Domain Name: ${INFO_FQDN}")
cmake_host_system_information(RESULT INFO_HAS_SERIAL_NUMBER QUERY HAS_SERIAL_NUMBER)
message(STATUS "Processor has serial number: ${INFO_HAS_SERIAL_NUMBER}")
cmake_host_system_information(RESULT INFO_NUMBER_OF_LOGICAL_CORES QUERY NUMBER_OF_LOGICAL_CORES)
message(STATUS "Logical cores: ${INFO_NUMBER_OF_LOGICAL_CORES}")
cmake_host_system_information(RESULT INFO_NUMBER_OF_PHYSICAL_CORES QUERY NUMBER_OF_PHYSICAL_CORES)
message(STATUS "Physical cores: ${INFO_NUMBER_OF_PHYSICAL_CORES}")
cmake_host_system_information(RESULT INFO_AVAILABLE_PHYSICAL_MEMORY QUERY AVAILABLE_PHYSICAL_MEMORY)
message(STATUS "Available physical memory: ${INFO_AVAILABLE_PHYSICAL_MEMORY}")
cmake_host_system_information(RESULT INFO_PROCESSOR_NAME QUERY PROCESSOR_NAME)
message(STATUS "Human readable processor name: ${INFO_PROCESSOR_NAME}")
cmake_host_system_information(RESULT INFO_PROCESSOR_SERIAL_NUMBER QUERY PROCESSOR_SERIAL_NUMBER)
message(STATUS "Processor serial number: ${INFO_PROCESSOR_SERIAL_NUMBER}")
cmake_host_system_information(RESULT INFO_IS_64BIT QUERY IS_64BIT)
message(STATUS "Processor is 64bit: ${INFO_IS_64BIT}")
cmake_host_system_information(RESULT INFO_HAS_SSE2 QUERY HAS_SSE2)
message(STATUS "Processor supports SSE2 instructions: ${INFO_HAS_SSE2}")
cmake_host_system_information(RESULT INFO_PROCESSOR_DESCRIPTION QUERY PROCESSOR_DESCRIPTION)
message(STATUS "Human readable full processor description: ${INFO_PROCESSOR_DESCRIPTION}")
cmake_host_system_information(RESULT INFO_OS_NAME QUERY OS_NAME)
message(STATUS "Name of the OS CMake is running on: ${INFO_OS_NAME}")
cmake_host_system_information(RESULT INFO_OS_RELEASE QUERY OS_RELEASE)
message(STATUS "The OS sub-type: ${INFO_OS_RELEASE}")
cmake_host_system_information(RESULT INFO_OS_VERSION QUERY OS_VERSION)
message(STATUS "The OS build ID: ${INFO_OS_VERSION}")
cmake_host_system_information(RESULT INFO_OS_PLATFORM QUERY OS_PLATFORM)
message(STATUS "The name of the CPU CMake is running on: ${INFO_OS_PLATFORM}")

set(include_dest "include")
set(tool_dest "bin")

# add external libraries (not header-only)
# include(external/external.cmake)

# subdirectories
set (CMAKE_PREFIX_PATH ${HOME}:$CMAKE_PREFIX_PATH)
set (cppzmq_DIR ${HOME}/share/cmake/cppzmq/)
find_package(cppzmq)
if(cppzmq_FOUND)
	include_directories(${cppzmq_INCLUDE_DIR})
	link_directories(${cppzmq_LIBRARY_DIR})
endif()
if (CIDER_BUILD_TESTS)
    add_subdirectory(tests)
endif()
if (CIDER_BUILD_EXAMPLES)
	macro(cider_add_examples EXAMPLENAME)
		add_executable(${EXAMPLENAME} ${ARGN})
		set_target_properties(${EXAMPLENAME} PROPERTIES FOLDER examples)
		set_target_properties(${EXAMPLENAME} PROPERTIES CXX_STANDARD 17)
		target_include_directories(${EXAMPLENAME} PUBLIC ${CMAKE_CURRENT_BINARY_DIR})
		add_test(NAME ${EXAMPLENAME} COMMAND ${EXAMPLENAME})
	endmacro()
    add_subdirectory(examples)
endif()

target_link_libraries(cider_test cppzmq)
